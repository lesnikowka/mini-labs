#include <iostream>
#include <vector>
#include <ctime>

template <class T>
void quicksort_(std::vector<T>& v, int first, int last) {
    if (last - first <= 1) return;

    int support = (first + last) / 2; 
    //int support = std::rand() % v.size();
    int numbofsimilar = 1;
    int i = first, j = support+1;
    while (j < last && i < support) {
        int aj = v[j]; int ai = v[i];
        if (v[i] > v[support]) {
            if (v[j] < v[support]) {
                std::swap(v[i], v[j]);
            }
            else if (v[j] == v[support]) {
                v.insert(v.begin() + support + 1, v[j]);
                j++;
                v.erase(v.begin() + j);
                numbofsimilar++;
            }
            else {
                j++;
            }
        }
        else if (v[i] == v[support]) {
            v.insert(v.begin() + support + 1, v[i]);
            v.erase(v.begin() + i);
            support--;
            numbofsimilar++;
        }
        else {
            i++;
        }
        
    }
    if (j < last) {
        while (j < last) {
            if (v[j] < v[support]) {
                v.insert(v.begin() + first, v[j]);
                support++;
                v.erase(v.begin() + j + 1);
            }
            else if (v[j] == v[support]) {
                v.insert(v.begin() + support + 1, v[j]);
                j++;
                v.erase(v.begin() + j);
                numbofsimilar++;
            }
            else {
                j++;
            }
        }
    }
    else {
        while (i < support) {
            if (v[i] > v[support]) {
                v.insert(v.begin() + support + numbofsimilar, v[i]);
                v.erase(v.begin() + i);
                support--;
            }
            else if (v[i] == v[support]) {
                v.insert(v.begin() + support + 1, v[i]);
                v.erase(v.begin() + i);
                support--;
                numbofsimilar++;
            }
            else {
                i++;
            }
        }
    }
    quicksort_(v, first, support);
    quicksort_(v, support + numbofsimilar , last);
}

template <class T>
void quicksort(std::vector<T>& v) {
    std::srand(std::time(0));
    quicksort_(v, 0, v.size());
}

void printv(std::vector<int> v) {
    for (auto i : v) {
        std::cout << i << " ";
    }
    std::cout << "\n";
}


int main() {
    std::vector<int> v = { 1,2,3,34,3,44,42,4,3,3,1,3,5,346,4,7,4,432};

    
    printv(v);
    quicksort(v);
    printv(v);
}
